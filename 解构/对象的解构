解构的对象名称要和属性名称一致
let {var1, var2} = {var1:…, var2:…}

//let options = {
    title: "Menu",
    width: 100,
    height: 200
  };

  let {title, width, height} = options;

  alert(title);  // Menu
  alert(width);  // 100
  alert(height); // 200

变量的顺序并不重要，下面这个代码也是等价的：

// 改变 let {...} 中元素的顺序
let {height, width, title} = { title: "Menu", height: 200, width: 100 }

改变变量名称解构

let options = {
  title: "Menu",
  width: 100,
  height: 200
};

// { sourceProperty: targetVariable }
let {width: w, height: h, title} = options;

// width -> w
// height -> h
// title -> title

alert(title);  // Menu
alert(w);      // 100
alert(h);      // 200

有默认值的解构
let options = {
  title: "Menu"
};

let {width = 100, height = 200, title} = options;

alert(title);  // Menu
alert(width);  // 100
alert(height); // 200

剩余模式...的解构
let options = {
  title: "Menu",
  height: 200,
  width: 100
};

// title = 名为 title 的属性
// rest = 存有剩余属性的对象
let {title, ...rest} = options;

// 现在 title="Menu", rest={height: 200, width: 100}
alert(rest.height);  // 200
alert(rest.width);   // 100

