let worker = {
    someMethod() {
        return 1;
    },

    slow(x) {
        // 可怕的 CPU 过载任务
        console.log("Called with " + x);
        return x * this.someMethod(); // (*)
    }
};

// 和之前例子中的代码相同
function cachingDecorator(func) {
    let cache = new Map();
    return function f23(x) {
        if (cache.has(x)) {
            return cache.get(x);
        }
        let result = func(x); // (**)
        cache.set(x, result);
        return result;
    };
}

console.log( worker.slow(1) ); // 原始方法有效

worker.slow = cachingDecorator(worker.slow); // 现在对其进行缓存
//这里的slow是
function f23(x) {
        if (cache.has(x)) {
            return cache.get(x);
        }
        let result = func(x); // (**)  当执行32： 因为这里是以函数调用 this丢失
//      let result = func.call(this, x); // 现在 "this" 被正确地传递了
        cache.set(x, result);
        return result;
    };
32： console.log( worker.slow(2) ); // 蛤！Error: Cannot read property 'someMethod' of undefined

let result = func.call(this, x); // 现在 "this" 被正确地传递了
在经过装饰之后，worker.slow 现在是包装器 function (x) { ... }。
因此，当 worker.slow(2) 执行时，包装器将 2 作为参数，并且 this=worker（它是点符号 . 之前的对象）。
在包装器内部，假设结果尚未缓存，func.call(this, x) 将当前的 this（=worker）和当前的参数（=2）传递给原始方法。