let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)

代码这么写
function sayHi() {
  alert('Hello');
}

setTimeout(sayHi, 1000);


带参数的情况：

function sayHi(phrase, who) {
  alert( phrase + ', ' + who );
}

setTimeout(sayHi, 1000, "Hello", "John"); // Hello, John


用 clearTimeout 来取消调度
setTimeout 在调用时会返回一个“定时器标识符（timer identifier）”，在我们的例子中是 timerId，我们可以使用它来取消执行。

setInterval 和 setTimeout 的用法基本相同，不同之处在于 setInterval 会无限期地调用函数，直到 clearInterval 被调用或者窗口被关闭。
下面的例子将每间隔 2 秒就会输出一条消息。5 秒之后，输出停止：

// 每 2 秒重复一次
let timerId = setInterval(() => alert('tick'), 2000);

// 5 秒之后停止
setTimeout(() => { clearInterval(timerId); alert('stop'); }, 5000);



取消调度的语法：

let timerId = setTimeout(...);
clearTimeout(timerId);

嵌套的 setTimeout 允许我们在前一个超时后等待指定的时间间隔，然后再运行：
let timerId = setInterval(() => alert('tick'), 2000);
*/

let timerId = setTimeout(function tick() {
  alert('tick');
  timerId = setTimeout(tick, 2000); // (*)
}, 2000);