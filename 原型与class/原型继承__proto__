1、在 JavaScript 中，所有的对象都有一个隐藏的 [[Prototype]] 属性，它要么是另一个对象，要么就是 null。

2、我们可以使用 obj.__proto__ 访问它（历史遗留下来的 getter/setter，这儿还有其他方法，很快我们就会讲到）。

3、通过 [[Prototype]] 引用的对象被称为“原型”。

4、如果我们想要读取 obj 的一个属性或者调用一个方法，并且它不存在，那么 JavaScript 就会尝试在原型中查找它。

5、写/删除操作直接在对象上进行，它们不使用原型（假设它是数据属性，不是 setter）。

6、如果我们调用 obj.method()，而且 method 是从原型中获取的，this 仍然会引用 obj。因此，方法始终与当前对象一起使用，即使方法是继承的。

7、for..in 循环在其自身和继承的属性上进行迭代。所有其他的键/值获取方法仅对对象本身起作用。

let animal = {
    name: "Animal",
    walk(){
        let t= ()=>{
            console.log(this.name)
        }
        t()
    }
}

let rabbit = {
    name: "Rabbit",
}

rabbit.__proto__ = animal;

rabbit.walk(); // Rabbit

//首先，当你调用rabbit.walk()时，方法walk是从rabbit对象上被调用的，
// 即使这个方法实际上是继承自animal对象的。因此，this关键字在walk方法中引用的是rabbit对象，而不是animal对象。