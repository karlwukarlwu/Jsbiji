当然可以。`extends`关键字在JavaScript中用于实现类之间的继承。通过`extends`，一个类可以继承另一个类的属性和方法。

以下是一个简单的示例：

```javascript
// 基类
class Animal {
    constructor(name) {
        this.name = name;
    }

    speak() {
        console.log(`${this.name} makes a noise.`);
    }
}

// 通过extends关键字继承Animal类
class Dog extends Animal {
    speak() {
        console.log(`${this.name} barks.`);
    }
}

const dog = new Dog('Rover');
dog.speak();  // 输出: Rover barks.
```

在这个示例中：

1. `Animal`是一个基类，具有一个`constructor`方法和一个`speak`方法。
2. `Dog`是一个派生类，通过`extends`关键字继承了`Animal`类。
3. `Dog`类重写了`speak`方法，这被称为方法覆盖。

当我们创建了一个`Dog`类型的对象并调用其`speak`方法时，由于`Dog`类有自己的`speak`方法，所以它不会使用`Animal`类的`speak`方法。

此外，派生类可以使用`super`关键字调用其父类的方法或构造函数：

```javascript
class Cat extends Animal {
    speak() {
        super.speak();  // 调用父类的speak方法
        console.log(`${this.name} meows.`);
    }
}

const cat = new Cat('Whiskers');
cat.speak();
// 输出:
// Whiskers makes a noise.
// Whiskers meows.
```

在这里，`Cat`类的`speak`方法首先调用了`Animal`类的`speak`方法，然后再执行自己的代码。

关于在构造器里面的调用顺序
父类构造器总是会使用它自己字段的值，而不是被重写的那一个。
（看看就行)
class Animal {
  name = 'animal';

  constructor() {
    alert(this.name); // (*)
  }
}

class Rabbit extends Animal {
  name = 'rabbit';
}

new Animal(); // animal
new Rabbit(); // animal